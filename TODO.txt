Logic:
  RC4 dice roll stream (Dice rolls all done server side, don't get dice rolls from user) (in protocol, need more info)

  Abstract the randomness, (put all randomness into classes with its own interface/implementation)

  Create logging system

  Add a timeout feature to stop AIs from taking too long

  Add DICEROll stage for each move that returns 256 bit int

  Each IPlayer implementation should call a method from some networking somewhere

  logic creates new RNG(256bitint)
  rng.getDiceRolls(5);

  Trade in cards positioning might have to be changed

  When should threads exit

Things:
  Decided how threading will work between UI / Lobby / Logic / Network
  Decided how card shuffling will work
  Decided how dice rolls will work
  Talk about Lobby -> Map UI integration
  How to send messages on behalf of local player


Adam:
  NetworkLocalPlayer to wrap local IPlayers: Implements DICE_ROLL stage and broadcasts moves made locally over network.
  Ask reps: Should cards be traded in on player defeat or at the start of a turn?
  logic.Move stages to implement until entire game should be possible;
            case PLACE_ARMIES:
            case DECIDE_ATTACK:
            case START_ATTACK:
            case CHOOSE_ATTACK_DICE:
            case CHOOSE_DEFEND_DICE:
            case OCCUPY_TERRITORY:
            case DECIDE_FORTIFY:
            case START_FORTIFY:
            case FORTIFY_TERRITORY:
  Parts of the protocol to implement:
	Dice Roll
	Card Shuffle (basically just a dice roll)
	Host must timeout players
	Message Signing: 
		Wrapper Format mandatory
		Store public_keys from players joined, use to verify messages.
	Revisit the lobby protocol: 
		not sure if initialise_game is currently sent,
		ping meaning / format changed
		ready meaning / format changed
		name and public key added to join_game
		handle receiving players_joined command
	